[{"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\store.js":"1","D:\\mms\\frontend\\mms-gis-web\\src\\Section.js":"2","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\showPopUpReducer.js":"3","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\secondTableReducer.js":"4","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\action.js":"5","D:\\mms\\frontend\\mms-gis-web\\src\\components\\popUp\\input.js":"6","D:\\mms\\frontend\\mms-gis-web\\src\\model\\point.js":"7","D:\\mms\\frontend\\mms-gis-web\\src\\components\\popUp\\pointPopUp.js":"8","D:\\mms\\frontend\\mms-gis-web\\src\\components\\add-group-pop-up\\index.js":"9","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\types.js":"10","D:\\mms\\frontend\\mms-gis-web\\src\\Aside.js":"11","D:\\mms\\frontend\\mms-gis-web\\src\\index.js":"12","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\firstTableReducer.js":"13","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\areasReducer.js":"14","D:\\mms\\frontend\\mms-gis-web\\src\\map\\index.js":"15","D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\groups.js":"16","D:\\mms\\frontend\\mms-gis-web\\src\\model\\group.js":"17","D:\\mms\\frontend\\mms-gis-web\\src\\components\\remove-group-pop-up\\index.js":"18"},{"size":227,"mtime":1614504717772,"results":"19","hashOfConfig":"20"},{"size":2206,"mtime":1615035821514,"results":"21","hashOfConfig":"20"},{"size":705,"mtime":1614896147381,"results":"22","hashOfConfig":"20"},{"size":2820,"mtime":1614849864441,"results":"23","hashOfConfig":"20"},{"size":4677,"mtime":1615033747293,"results":"24","hashOfConfig":"20"},{"size":375,"mtime":1614504717797,"results":"25","hashOfConfig":"20"},{"size":337,"mtime":1614713350442,"results":"26","hashOfConfig":"20"},{"size":4100,"mtime":1615032459101,"results":"27","hashOfConfig":"20"},{"size":2698,"mtime":1614903147641,"results":"28","hashOfConfig":"20"},{"size":1245,"mtime":1615032459097,"results":"29","hashOfConfig":"20"},{"size":8724,"mtime":1615036434689,"results":"30","hashOfConfig":"20"},{"size":352,"mtime":1614504717800,"results":"31","hashOfConfig":"20"},{"size":1767,"mtime":1614847519855,"results":"32","hashOfConfig":"20"},{"size":327,"mtime":1615032459074,"results":"33","hashOfConfig":"20"},{"size":4705,"mtime":1615032459102,"results":"34","hashOfConfig":"20"},{"size":281,"mtime":1614721256329,"results":"35","hashOfConfig":"20"},{"size":522,"mtime":1614713844635,"results":"36","hashOfConfig":"20"},{"size":2684,"mtime":1614903147645,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"a5r1ay",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\store.js",[],["77","78"],"D:\\mms\\frontend\\mms-gis-web\\src\\Section.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\showPopUpReducer.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\secondTableReducer.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\action.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\components\\popUp\\input.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\model\\point.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\components\\popUp\\pointPopUp.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\components\\add-group-pop-up\\index.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\types.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Aside.js",["79"],"D:\\mms\\frontend\\mms-gis-web\\src\\index.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\firstTableReducer.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\areasReducer.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\map\\index.js",["80"],"import {useEffect, useRef, useState} from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport './map.scss';\r\nimport overlap from \"polygon-overlap\";\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXNkNzI2IiwiYSI6ImNrbDZ4dW5lbTJtNm4zMG1zZjhhMmo1d28ifQ.Hy6v6YxQfGTapr-SsS4eqQ'\r\n\r\nconst defaultLongitude = 32.9;\r\nconst defaultLatitude = 49.8;\r\nconst defaultZoom = 5;\r\n\r\nconst Map = ({research, pollution, cities, showAreas}) => {\r\n\r\n    const mapContainer = useRef(null);\r\n    const [lng, setLng] = useState(defaultLongitude)\r\n    const [lat, setLat] = useState(defaultLatitude);\r\n    const [zoom, setZoom] = useState(defaultZoom);\r\n\r\n    const hideAreas = (map) => {\r\n        research.concat(pollution).concat().concat(cities)\r\n            .forEach(group => {\r\n                const layer = map.getLayer((group.id).toString());\r\n                if (layer) {\r\n                    map.removeLayer((group.id).toString());\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const map = new mapboxgl.Map({\r\n            container: mapContainer.current,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [lng, lat],\r\n            zoom: zoom\r\n        });\r\n\r\n        map.on('move', () => {\r\n            setLng(map.getCenter().lng.toFixed(4));\r\n            setLat(map.getCenter().lat.toFixed(4));\r\n            setZoom(map.getZoom().toFixed(2));\r\n        });\r\n\r\n        map.on('load', () => {\r\n            if (!showAreas) {\r\n                hideAreas(map);\r\n                return;\r\n            }\r\n\r\n            research.map(group => drawGroup(map, group, '#3f48cc'));\r\n            pollution.forEach(group => {\r\n                const isInResearchArea = research\r\n                    .some(researchArea => groupInArea(group, researchArea))\r\n                if (isInResearchArea) {\r\n                    drawGroup(map, group, '#ed1c24');\r\n                }\r\n            });\r\n            cities.forEach(group => {\r\n                const cityStatus = getCityStatus(group, research, pollution);\r\n                switch (cityStatus) {\r\n                    case 'SAFE':\r\n                        drawGroup(map, group, '#3f48cc', true);\r\n                        break;\r\n                    case 'DANGER':\r\n                        drawGroup(map, group, '#ed1c24', true);\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n            });\r\n        });\r\n\r\n        return () => map.remove();\r\n    }, [research, pollution, cities, showAreas]);\r\n\r\n    return (\r\n        <div className='global-map'>\r\n            <div className='sidebar'>\r\n                Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n            </div>\r\n            <div className=\"map-container\" ref={mapContainer}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction drawGroup(map, group, color, fill = false) {\r\n    // it is necessary to add the last point in the end\r\n    // to render closed polygon\r\n    if (!group.points.length) {\r\n        return;\r\n    }\r\n\r\n    const coordinates = group.points.map(point => [\r\n        parseFloat(point.x),\r\n        parseFloat(point.y)\r\n    ]).concat([[parseFloat(group.points[0].x),\r\n        parseFloat(group.points[0].y)]]);\r\n\r\n    const data = {\r\n        'type': 'Feature',\r\n        'geometry': {\r\n            'type': 'Polygon',\r\n            'coordinates': [coordinates]\r\n        }\r\n    }\r\n\r\n    const source = map.getSource((group.id).toString());\r\n    if (source) {\r\n        source.setData(data);\r\n    } else {\r\n        map.addSource((group.id).toString(), {\r\n            'type': 'geojson',\r\n            'data': data\r\n        });\r\n    }\r\n\r\n    const layer = map.getLayer((group.id).toString());\r\n    if (!layer) {\r\n        map.addLayer({\r\n            'id': (group.id).toString(),\r\n            'type': fill ? 'fill' : 'line',\r\n            'source': (group.id).toString(),\r\n            'paint': fill ? {'fill-color': color, 'fill-opacity': 0.8}\r\n                : {'line-color': color}\r\n        });\r\n    }\r\n}\r\n\r\nfunction getCityStatus(group, research, pollution) {\r\n    const outerResearchAreas = research\r\n        .filter(currentResearchArea => groupInArea(group, currentResearchArea));\r\n    if (outerResearchAreas.length === 0) {\r\n        return 'OUT';\r\n    }\r\n\r\n    const outerPollutionAreas = pollution\r\n        .filter(currentPollutionArea => groupInArea(group, currentPollutionArea));\r\n    return (outerPollutionAreas.length === 0) ? 'SAFE' : 'DANGER';\r\n}\r\n\r\nfunction groupInArea(group, area) {\r\n    const polygon1 = group.points\r\n        .map(point => [point.x, point.y]);\r\n    const polygon2 = area.points\r\n        .map(point => [point.x, point.y]);\r\n    return overlap(polygon1, polygon2);\r\n}\r\n\r\nexport default Map;\r\n",["81","82"],"D:\\mms\\frontend\\mms-gis-web\\src\\Rudux\\groups.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\model\\group.js",[],"D:\\mms\\frontend\\mms-gis-web\\src\\components\\remove-group-pop-up\\index.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":77,"column":9,"nodeType":"89","messageId":"90","endLine":87,"endColumn":10},{"ruleId":"91","severity":1,"message":"92","line":73,"column":8,"nodeType":"93","endLine":73,"endColumn":48,"suggestions":"94"},{"ruleId":"83","replacedBy":"95"},{"ruleId":"85","replacedBy":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'hideAreas', 'lat', 'lng', and 'zoom'. Either include them or remove the dependency array.","ArrayExpression",["99"],["97"],["98"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [research, pollution, cities, showAreas, lng, lat, zoom, hideAreas]",{"range":"102","text":"103"},[2480,2520],"[research, pollution, cities, showAreas, lng, lat, zoom, hideAreas]"]